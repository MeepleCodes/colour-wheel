import csv, sys, json, argparse, re

def json_paints(paints):
    return ",\n".join(json.dumps(paint) for paint in paints)        


def import_golden(filename):
    SLICE_THICK = slice(7,13)
    SLICE_THIN = slice(1,7)

    def to_colour(rowslice):
        return {
            # Skip these for now, even though we have it
            # "munsell": [rowslice[0], float(rowslice[1]), float(rowslice[2])],
            "lab": [float(f) for f in rowslice[3:6]]
        }
    paints_thick = []
    paints_thin = []

    with open(filename, newline='') as csvfile:
        csvreader = csv.reader(csvfile)
        # Skip the header row
        next(csvreader)
        for row in csvreader:
            paints_thick.append({
                "name": row[0].strip(),
                **to_colour(row[SLICE_THICK])
            })
            paints_thin.append({
                "name": row[0].strip(),
                **to_colour(row[SLICE_THIN])
            })


    return f"""
export type GoldenAcrylicNames = {' | '.join(f'"{p["name"]}"' for p in paints_thick)};
export const goldenAcrylicsThick: NamedColour[] = [{json_paints(paints_thick)}];
export const goldenAcrylicsThin: NamedColour[] = [{json_paints(paints_thin)}];"""    

def import_liquitex(filename):
    number_re = re.compile(r"[0-9.]+")
    paints_single = []
    paints_mixture = []
    with open(filename, newline='') as csvfile:
        csvreader = csv.reader(csvfile)
        # Skip the header row
        next(csvreader)
        for row in csvreader:
            # Skip rows without munsell data
            if not number_re.match(row[4]):
                continue
            name = row[1].strip().title()
            is_single = row[8] == "s"
            lab = f"munsellToLab(\"{row[3].upper().replace('BP', 'PB')} {row[4]}/{row[5]}\")"
            p = {
                    "name": name,
                    "json": f'{{"name": "{name}", "lab": {lab}}},'
                }
            
            if is_single:
                paints_single.append(p)
            else:
                paints_mixture.append(p)
    single_json = "\n".join(p["json"] for p in paints_single)
    mixed_json = "\n".join(p["json"] for p in paints_mixture)
    return f"""
import {{ munsellToLab }} from 'munsell';    
export type LiquitexNames = {' | '.join(f'"{p["name"]}"' for p in paints_single + paints_mixture)};
export const liquitexSinglePigmentPaints: NamedColour[] = [{single_json}];
export const liquitexMixedPigmentPaints: NamedColour[] = [{mixed_json}];
"""    
def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("parser", choices=["golden", "liquitex"], help="Format of the input file")
    parser.add_argument("filename", help="Filename to parse")
    parser.add_argument("-o", "--output", type=argparse.FileType("w"), default="-", help="Output file location or - for stdout (default: stdout)")
    args = parser.parse_args()

    
    if args.parser == "golden":
        body = import_golden(args.filename)
    else:
        body = import_liquitex(args.filename)
    args.output.write(f"""
    /** Autogenerated paint color value list
    * This file was autogenerated from {args.filename} using {__file__}
    **/
    import {{ NamedColour }} from './Colours';
    {body}
    """)
if __name__ == "__main__":
    main()